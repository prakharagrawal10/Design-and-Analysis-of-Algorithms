=================== 01kapsack.cpp =================

#include <iostream>
#include <algorithm> // for max function
using namespace std;

int knapsack(int W, int wt[], int val[], int n)
{
    int dp[n + 1][W + 1];

    // Initialize the dp array
    for (int i = 0; i <= n; i++)
    {
        for (int w = 0; w <= W; w++)
        {
            if (i == 0 || w == 0)
            {
                dp[i][w] = 0;
            }
            else if (wt[i - 1] <= w)
            {
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
            }
            else
            {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];
}

int main()
{
    int W = 8;
    int val[] = {
        6,
        2,
        1,
        5,
    };
    int wt[] = {5, 3, 2, 4};
    int n = sizeof(val) / sizeof(val[0]);

    cout << "Maximum value that can be obtained: " << knapsack(W, wt, val, n) << endl;

    return 0;
}


=================== a1.cpp =================

#include <iostream>
using namespace std;

int maxSubArray(int nums[], int size) {
    if (size == 0) return 0;

    int max1 = nums[0];
    int max = nums[0];

    for (int i = 1; i < size; i++) {
        if (nums[i] > max1 + nums[i]) {
            max1 = nums[i];
        } else {
            max1 = max1 + nums[i];
        }
        if (max1 > max) {
            max = max1;
        }
    }
    return max;
}

int main() {
    int nums[] = {-2, -3, 4, -1, -2, 1, 5, -3};
    int size = sizeof(nums) / sizeof(nums[0]);

    int maxSum = maxSubArray(nums, size);

    cout << "Maximum contiguous sum is: " << maxSum << endl;
    return 0;
}


=================== als.cpp =================

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int assemblyLineScheduling(vector<vector<int>>& a, vector<vector<int>>& t, vector<int>& e, vector<int>& x) {
    int n = a[0].size(); // Number of stations

    // Time taken to reach each station on line 1 and line 2
    vector<int> f1(n), f2(n);
    f1[0] = e[0] + a[0][0]; // Entry time for line 1 + time taken at first station
    f2[0] = e[1] + a[1][0]; // Entry time for line 2 + time taken at first station

    // Calculate the fastest time to reach each station on line 1 and line 2
    for (int i = 1; i < n; i++) {
        f1[i] = min(f1[i - 1] + a[0][i], f2[i - 1] + t[1][i] + a[0][i]);
        f2[i] = min(f2[i - 1] + a[1][i], f1[i - 1] + t[0][i] + a[1][i]);
    }

    // Calculate the total time taken to exit the assembly line
    return min(f1[n - 1] + x[0], f2[n - 1] + x[1]);
}

int main() {
    // Example input
    vector<vector<int>> a = {{4,5,3,2}, {2,10,1,4}}; // Time taken at each station
    vector<vector<int>> t = {{0,7,4,5}, {0,9,2,4}}; // Time taken to switch lines
    vector<int> e = {10, 12}; // Entry time for each line
    vector<int> x = {18, 7}; // Exit time for each line

    int totalTime = assemblyLineScheduling(a, t, e, x);
    cout << "Total time taken: " << totalTime << endl;

    return 0;
}

=================== edmondkarp.cpp =================

#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

#define V 6 // Number of vertices in graph

bool bfs(vector<vector<int>>& rGraph, int s, int t, vector<int>& parent) {
    vector<bool> visited(V, false);
    queue<int> q;
    q.push(s);
    visited[s] = true;
    parent[s] = -1;

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        for (int v = 0; v < V; v++) {
            if (!visited[v] && rGraph[u][v] > 0) {
                q.push(v);
                parent[v] = u;
                visited[v] = true;
            }
        }
    }

    return (visited[t] == true);
}

int edmondsKarp(vector<vector<int>>& graph, int s, int t) {
    int u, v;

    vector<vector<int>> rGraph = graph;
    vector<int> parent(V, -1);

    int max_flow = 0;

    while (bfs(rGraph, s, t, parent)) {
        int path_flow = INT_MAX;
        for (v = t; v != s; v = parent[v]) {
            u = parent[v];
            path_flow = min(path_flow, rGraph[u][v]);
        }

        for (v = t; v != s; v = parent[v]) {
            u = parent[v];
            rGraph[u][v] -= path_flow;
            rGraph[v][u] += path_flow;
        }

        max_flow += path_flow;
    }

    return max_flow;
}

int main() {
    vector<vector<int>> graph = { {0, 16, 13, 0, 0, 0},
                                  {0, 0, 10, 12, 0, 0},
                                  {0, 4, 0, 0, 14, 0},
                                  {0, 0, 9, 0, 0, 20},
                                  {0, 0, 0, 7, 0, 4},
                                  {0, 0, 0, 0, 0, 0} };

    cout << "The maximum possible flow is " << edmondsKarp(graph, 0, 5) << endl;

    return 0;
}

=================== fractional knapsach.cpp =================

#include <iostream>
using namespace std;

int main()
{
    int w[] = {20, 25, 10};
    int val[] = {30, 35, 40};
    int W = 40;
    int n = sizeof(val) / sizeof(val[0]);
    float pw[n];

    // Calculate profit-to-weight ratio
    for (int i = 0; i < n; i++)
    {
        pw[i] = (float)val[i] / w[i];
        cout << "Profit-to-weight ratio of item " << i << ": " << pw[i] << endl;
    }

    // Initialize total weight and total value
    float weight = 0;
    int total_value = 0;

    // Greedy approach using the maximum profit-to-weight ratio
    while (W > 0)
    {
        float max_pw = 0; // Initialize max_pw to 0
        int index = -1;

        // Find the maximum profit-to-weight ratio
        for (int i = 0; i < n; i++)
        {
            if (pw[i] > max_pw && w[i] > 0)
            {
                max_pw = pw[i]; // Update max_pw if current pw[i] is greater
                index = i;
            }
        }

        if (index == -1)
            break; // No more items can be selected

        // Take the item with maximum profit-to-weight ratio
        if (weight + w[index] <= W)
        {
            weight += w[index];
            total_value += val[index];
            w[index] = 0; // Mark the item as taken
        }
        else
        {
            float fraction = (float)(W - weight) / w[index];
            weight += w[index] * fraction;
            total_value += val[index] * fraction;
            w[index] = 0; // Mark the item as taken
        }
    }

    cout << "Total value of items selected: " << total_value << endl;

    return 0;
}


=================== grahamscan.cpp =================

#include <iostream>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

struct Point {
    int x, y;
};

Point p0; // Global variable to store the reference point

// Utility function to find the orientation of three points
int orientation(Point p, Point q, Point r) {
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0; // collinear
    return (val > 0) ? 1 : 2; // clockwise or counterclockwise
}

// Function to get the element at the top of the stack without popping it
Point nextToTop(stack<Point>& s) {
    Point top = s.top();
    s.pop();
    Point nextTop = s.top();
    s.push(top);
    return nextTop;
}

// Comparator function for sorting points based on polar angle
bool compare(Point p1, Point p2) {
    // Find orientation of triplet (p, p1, p2)
    int o = orientation(p0, p1, p2);
    if (o == 0)
        return (p1.x*p1.x + p1.y*p1.y >= p2.x*p2.x + p2.y*p2.y);
    return (o == 2); // if counterclockwise, push it into the stack
}

// Function to find the point with the lowest y-coordinate
// Used as the reference point for sorting and polar angle calculation
Point findLowestPoint(vector<Point>& points) {
    Point lowest = points[0];
    for (int i = 1; i < points.size(); i++) {
        if (points[i].y < lowest.y || (points[i].y == lowest.y && points[i].x < lowest.x)) {
            lowest = points[i];
        }
    }
    return lowest;
}

// Function to implement Graham Scan algorithm
vector<Point> grahamScan(vector<Point>& points) {
    // Find the point with the lowest y-coordinate
    p0 = findLowestPoint(points);

    // Sort points based on polar angle with respect to lowest point
    sort(points.begin(), points.end(), compare);

    // Initialize stack
    stack<Point> s;
    s.push(points[0]);
    s.push(points[1]);
    
    // Process remaining points
    for (int i = 2; i < points.size(); i++) {
        while (s.size() > 1 && orientation(s.top(), points[i], nextToTop(s)) != 2) {
            s.pop();
        }
        s.push(points[i]);
    }

    // Copy the convex hull points from stack to a vector
    vector<Point> convexHull;
    while (!s.empty()) {
        convexHull.push_back(s.top());
        s.pop();
    }

    return convexHull;
}

// Driver function
int main() {
    vector<Point> points = {{0, 3}, {2, 2}, {1, 1}, {2, 1}, {3, 0}, {0, 0}, {3, 3}};
    vector<Point> convexHull = grahamScan(points);

    cout << "Convex Hull:\n";
    for (auto point : convexHull) {
        cout << "(" << point.x << ", " << point.y << ")\n";
    }

    return 0;
}


=================== hufman.cpp =================

#include <iostream>
#include <queue>
#include <unordered_map>
using namespace std;

// Node class for Huffman tree
class Node {
public:
    char data;
    int freq;
    Node* left;
    Node* right;

    Node(char data, int freq) {
        this->data = data;
        this->freq = freq;
        left = right = nullptr;
    }
};

// Comparator for priority queue
struct Compare {
    bool operator()(Node* left, Node* right) {
        return left->freq > right->freq;
    }
};

// Function to build Huffman tree and generate codes
void buildHuffmanTree(string text) {
    // Count frequency of each character
    unordered_map<char, int> freqMap;
    for (char ch : text) {
        freqMap[ch]++;
    }

    // Create a priority queue to store nodes
    priority_queue<Node*, vector<Node*>, Compare> pq;

    // Create a leaf node for each character and add it to the priority queue
    for (auto pair : freqMap) {
        Node* node = new Node(pair.first, pair.second);
        pq.push(node);
    }

    // Build the Huffman tree
    while (pq.size() > 1) {
        Node* left = pq.top();
        pq.pop();
        Node* right = pq.top();
        pq.pop();

        Node* parent = new Node('$', left->freq + right->freq);
        parent->left = left;
        parent->right = right;

        pq.push(parent);
    }

    // Traverse the Huffman tree and generate codes
    // TODO: Implement code generation logic here

    // Cleanup
    Node* root = pq.top();
    pq.pop();
    delete root;
}

int main() {
    string text = "Hello, World!";
    buildHuffmanTree(text);

    return 0;
}

=================== jarvismatch.cpp =================

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

struct Point {
    int x, y;
};

// Utility function to find orientation of triplet (p, q, r)
int orientation(Point p, Point q, Point r) {
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;  // colinear
    return (val > 0) ? 1 : 2; // clock or counterclock wise
}

// Function to find the convex hull of a set of n points
vector<Point> convexHull(vector<Point>& points) {
    int n = points.size();
    if (n < 3) return {}; // Convex hull not possible

    // Initialize result
    vector<Point> hull;

    // Find the leftmost point
    int leftmost = 0;
    for (int i = 1; i < n; i++) {
        if (points[i].x < points[leftmost].x)
            leftmost = i;
    }

    int p = leftmost, q;
    do {
        // Add current point to result
        hull.push_back(points[p]);

        // Search for a point 'q' such that orientation(p, q, r) is counterclockwise for all points 'r'
        q = (p + 1) % n;
        for (int i = 0; i < n; i++) {
            if (orientation(points[p], points[i], points[q]) == 2)
                q = i;
        }

        // Set p as q for the next iteration
        p = q;

    } while (p != leftmost); // While we don't reach the first point again

    return hull;
}

int main() {
    vector<Point> points = {{0, 3}, {2, 2}, {1, 1}, {2, 1}, {3, 0}, {0, 0}, {3, 3}};
    vector<Point> hull = convexHull(points);

    cout << "Convex Hull:\n";
    for (auto p : hull) {
        cout << "(" << p.x << ", " << p.y << ")\n";
    }
    return 0;
}


=================== karatsuba.cpp =================

#include <iostream>
#include <string>
#include <cmath>
using namespace std;

long long int karatsuba(long long int x, long long int y)
{
    if (x < 10 || y < 10)
    {
        return x * y;
    }
    int n = max(to_string(x).size(), to_string(y).size());
    int m = n / 2;
    long long int a = x / static_cast<long long int>(pow(10, m));
    long long int b = x % static_cast<long long int>(pow(10, m));
    long long int c = y / static_cast<long long int>(pow(10, m));
    long long int d = y % static_cast<long long int>(pow(10, m));
    long long int ac = karatsuba(a, c);
    long long int bd = karatsuba(b, d);
    long long int ad_bc = karatsuba(a + b, c + d) - ac - bd;

    return ac * static_cast<long long int>(pow(10, 2 * m)) + ad_bc * static_cast<long long int>(pow(10, m)) + bd;
}

int main()
{
    long long int x, y;
    x = 123567890, y = 98987610;
    cout << karatsuba(x, y);
    return 0;
}


=================== kmp.cpp =================

#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<int> computeLPSTable(const string &pattern)
{
    vector<int> lps(pattern.length(), 0);

    int i = 0;
    int j = 1;
    lps[0] = 0;

    while (j < pattern.length())
    {
        if (pattern[i] == pattern[j])
        {
            lps[j] = i + 1;
            i++;
            j++;
        }
        else
        {
            if (i != 0)
            {
                i = lps[i - 1];
            }
            else
            {
                lps[j] = 0;
                j++;
            }
        }
    }
    for (int i = 0; i < lps.size(); i++) {
        // Printing the element at
        // index 'i' of vector
        cout <<" lps("<<i <<")="<< lps[i]   ;
    }
    return lps;
}

vector<int> KMP(const string &text, const string &pattern)
{
    vector<int> lps = computeLPSTable(pattern);
    vector<int> matches;

    int textLength = text.length();
    int patternLength = pattern.length();

    int i = 0; // Index for text[]
    int j = 0; // Index for pattern[]

    while (i < textLength)
    {
        if (pattern[j] == text[i])
        {
            i++;
            j++;
        }

        if (j == patternLength)
        {
            matches.push_back(i - j);
            j = lps[j - 1];
        }
        else if (i < textLength && pattern[j] != text[i])
        {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    return matches;
}

int main()
{
    string text = "abcdabcdabeabbabcee";
    string pattern = "abcdabeabb";

    vector<int> matches = KMP(text, pattern);

    if (matches.empty())
    {
        cout << "Pattern not found in text." << endl;
    }
    else
    {
        cout<<endl;
        cout << "Pattern found at positions: ";
        for (int match : matches)
        {
            cout << match << " ";
        }
        cout << endl;
    }

    return 0;
}


=================== lcs.cpp =================

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int lcs(const string& str1, const string& str2) {
    int m = str1.length();
    int n = str2.length();

    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    return dp[m][n];
}

int main() {
    string str1, str2;
    cout << "Enter the first string: ";
    cin >> str1;
    cout << "Enter the second string: ";
    cin >> str2;

    int length = lcs(str1, str2);
    cout << "Length of the Longest Common Subsequence: " << length << endl;

    return 0;
}


=================== matrixchain.cpp =================

#include <iostream> 
#include <vector> 
using namespace std; 
 
int matrixchainmul(vector<int>& dimension, vector<vector<int>>& splitpoints){ 
    int n = dimension.size(); 
    vector<vector<int>> dc(n,vector<int>(n,0)); 
     
    for (int len = 2; len<n; ++len){ 
        for (int i = 1 ; i<n-len+1; ++i){ 
            int j = i +len -1; 
            dc[i][j] = INT_MAX;
            for(int k = i; k<j; ++k){ 
                int cost = dc[i][k] + dc[k+1][j] + dimension[i-1]*dimension[j]*dimension[k]; 
                if(cost<dc[i][j]){ 
                    dc[i][j] = cost; 
                    splitpoints[i][j]=k; 
                } 
            } 
             
        } 
    } 
     
    return dc[1][n-1]; 
} 
 
void printOpmalOrder(const vector<vector<int>>& splitpoints, int i, int j){ 
     
    if (i == j) { 
        cout << "A" << i; 
    } else { 
        cout << "("; 
        printOpmalOrder(splitpoints, i, splitpoints[i][j]); 
        printOpmalOrder(splitpoints, splitpoints[i][j] + 1, j); 
        cout << ")"; 
    } 
     
} 
 
int main() { 
    vector<int> dimension = {10,20,30,40}; 
    int n = dimension.size(); 
    vector<vector<int>> splitpoints(n,vector<int>(n,0)); 
    int max =  matrixchainmul(dimension,splitpoints); 

    cout << "Minimum number of scalar mul plica ons needed: " << max << endl; 
     
    cout << "Order of mul plica on: "; 
    printOpmalOrder(splitpoints, 1, n - 1); 
    cout << endl; 
     
     
     
 
    return 0; 
}

=================== maxminmarks.cpp =================

#include <iostream>
#include <vector>
#include <limits>

using namespace std;

pair<int, int> find_top_and_least_scores(const vector<int>& scores, int start, int end) {
    if (start == end) {
        return make_pair(scores[start], scores[start]);
    }

    int mid = start + (end - start) / 2;
    pair<int, int> left = find_top_and_least_scores(scores, start, mid);
    pair<int, int> right = find_top_and_least_scores(scores, mid + 1, end);

    int top = max(left.first, right.first);
    int least = min(left.second, right.second);

    return make_pair(top, least);
}

int main() {
    vector<int> scores = {85, 72, 90, 65, 92, 78, 60, 95};

    pair<int, int> result = find_top_and_least_scores(scores, 0, scores.size() - 1);

    cout << "Top score: " << result.first << endl;
    cout << "Least score: " << result.second << endl;

    return 0;
}


=================== mazimum subarr.cpp =================

#include <climits>
#include <iostream>
using namespace std;

// Function to find the maximum sum subarray crossing the midpoint
int css(int arr[], int low, int mid, int high)
{
    int left = 0; // Initialize the running sum of the left subarray to 0
    int left_sum = INT_MIN; // Initialize the maximum sum of the left subarray to negative infinity

    // Traverse the left subarray to find the maximum sum
    for (int i = mid; i >= low; i--)
    {
        left += arr[i]; // Add the current element to the running sum
        left_sum = max(left_sum, left); // Update left_sum if the running sum is greater
    }

    int right = 0; // Initialize right sum to 0
    int right_sum = INT_MIN; // Initialize right_sum to negative infinity
    // Traverse the right subarray to find the maximum sum
    for (int i = mid + 1; i <= high; i++)
    {
        right += arr[i]; // Add the current element to the running sum
        right_sum = max(right_sum, right); // Update right_sum if the running sum is greater
    }

    // Return the sum of maximum left and right subarray sums
    return left_sum + right_sum;
}

// Function to find the maximum sum subarray
int mss(int arr[], int low, int high)
{
    // Base case: If there is only one element in the array, return that element
    if (low == high)
    {
        return arr[low];
    }
    // Calculate the midpoint
    int mid = (low + high) / 2;
    // Recursively find the maximum sum subarray in the left subarray
    int left_sum = mss(arr, low, mid);
    // Recursively find the maximum sum subarray in the right subarray
    int right_sum = mss(arr, mid + 1, high);
    // Find the maximum sum subarray crossing the midpoint
    int cross_sum = css(arr, low, mid, high);
    // Return the maximum of left subarray sum, right subarray sum, and cross subarray sum
    return max(left_sum, max(right_sum, cross_sum));
}

int main()
{
    // Input array
    int arr[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    // Calculate the size of the array
    int n = sizeof(arr) / sizeof(arr[0]);
    // Find and print the maximum sum subarray
    cout << mss(arr, 0, n - 1);
    return 0;
}


=================== mergesort.cpp =================

#include <iostream>
using namespace std;

void merge(int A[], int lb, int mid, int ub) {
    int i = lb;
    int j = mid + 1;
    int k = lb; // Initialize k with the starting index of the merged array
    int B[ub + 1]; // Temporary array for merging

    while (i <= mid && j <= ub) {
        if (A[i] <= A[j]) {
            B[k] = A[i];
            i++;
        } else {
            B[k] = A[j];
            j++;
        }
        k++;
    }

    if (i > mid) {
        while (j <= ub) { // Copy remaining elements from the second half
            B[k] = A[j];
            j++;
            k++;
        }
    } else {
        while (i <= mid) { // Copy remaining elements from the first half
            B[k] = A[i];
            i++;
            k++;
        }
    }

    // Copy merged elements back to original array A
    for (int p = lb; p <= ub; p++) {
        A[p] = B[p];
    }
}

void mergeSort(int A[], int lb, int ub) {
    if (lb < ub) {
        int mid = (lb + ub) / 2;
        mergeSort(A, lb, mid); // Sort first half
        mergeSort(A, mid + 1, ub); // Sort second half
        merge(A, lb, mid, ub); // Merge the sorted halves
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    cout << "Given array is \n";
    for (int i = 0; i < arr_size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    mergeSort(arr, 0, arr_size - 1);

    cout << "Sorted array is \n";
    for (int i = 0; i < arr_size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}

=================== n queens in cpp.cpp =================

#include <iostream>
using namespace std;

bool isSafe(int** arr, int x, int y, int n){
    for(int row=0; row<x; row++){
        if(arr[row][y]==1){
            return false;
        }
    }
    int row=x;
    int col=y;
    while(row>=0 && col>=0){
        if(arr[row][col]==1){
            return false;
        }
        row--;
        col--;
    }
    row=x;
    col=y;
    while(row>=0 && col<n){
        if(arr[row][col]==1){
            return false;
        }
        row--;
        col++;
    }
    return true;
}

bool nQueen(int** arr, int x, int n){
    if(x>=n){
        return true;
    }
    for(int col=0; col<n; col++){
        if(isSafe(arr, x, col, n)){
            arr[x][col]=1;
            if(nQueen(arr, x+1, n)){
                return true;
            }
            arr[x][col]=0;
        }
    }
    return false;
}

int main(){
    int n;
    cin>>n;
    int** arr = new int*[n];
    for(int i=0; i<n; i++){
        arr[i] = new int[n];
        for(int j=0; j<n; j++){
            arr[i][j]=0;
        }
    }
    if(nQueen(arr, 0, n)){
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                cout<<arr[i][j]<<" ";
            }
            cout<<endl;
        }
    }
    return 0;
}

=================== naive sring.cpp =================

// C++ program for Naive Pattern
// Searching algorithm
#include <iostream>
using namespace std;

void search(string& pat, string txt)
{
	int M = pat.size();
	int N = txt.size();

	/* A loop to slide pat[] one by one */
	for (int i = 0; i <= N - M; i++) 
    {
		int j;

		/* For current index i, check for pattern match */
		for (j = 0; j < M; j++)
			if (txt[i + j] != pat[j])
				break;

		if (j== M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]
			cout << "Pattern found at index " << i << endl;
	}
}

// Driver's Code
int main()
{
	string txt = "AABAACAADAABAAABAA";
	string pat = "AABA";

	// Function call
	search(pat, txt);
	return 0;
}



=================== nqueens.cpp =================

#include <iostream>
#include <vector>

using namespace std;

// Function to check if it's safe to place a queen at position (x, y)
bool isSafe(vector<vector<int>>& arr, int x, int y, int n) {
    // Check if there's a queen in the same column
    for (int row = 0; row < x; row++) {
        if (arr[row][y] == 1) {
            return false;
        }
    }

    // Check if there's a queen in the upper left diagonal
    int row = x;
    int col = y;
    while (row >= 0 && col >= 0) {
        if (arr[row][col] == 1) {
            return false;
        }
        row--;
        col--;   
    }

    // Check if there's a queen in the upper right diagonal
    row = x;
    col = y;
    while (row >= 0 && col < n) {
        if (arr[row][col] == 1) {
            return false;
        }
        row--;
        col++;
    }

    return true;    
}

// Function to solve the N-Queens problem recursively
bool nQueen(vector<vector<int>>& arr, int x, int n) {
    // Base case: all queens are placed
    //here y not needed becasue we 
    //loop rows to place queen and check column in isSafe() function

    if (x >= n) {
        return true;
    }

    // Try placing queen in each column of the current row
    for (int col = 0; col < n; col++) {
        if (isSafe(arr, x, col, n)) {
            // Place the queen
            arr[x][col] = 1;

            // Recur for next row
            if (nQueen(arr, x + 1, n)) {
                return true;    
            }

            // If placing queen at (x, col) doesn't lead to a solution,
            // backtrack and try placing it elsewhere
            arr[x][col] = 0;
        }
    }
    // No solution found for this row
    return false;
}

int main() {
    int N = 4; // Number of queens and size of the chessboard
    // Create an empty chessboard
    vector<vector<int>> arr(N, vector<int>(N, 0));

    // Call the nQueen function to solve the problem
    if (nQueen(arr, 0, N)) {
        cout << "Solution exists. Here's the arrangement:\n";
        // Print the arrangement
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "Solution does not exist for N = " << N << endl;
    }
    return 0;
}


=================== operator.cpp =================

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int evaluateExpression(string expression) {
    int n = expression.length();
    vector<int> nums;
    vector<char> ops;

    for (int i = 0; i < n; i++) {
        if (isdigit(expression[i])) {
            int num = 0;
            while (i < n && isdigit(expression[i])) {
                num = num * 10 + (expression[i] - '0');
                i++;
            }
            nums.push_back(num);
            i--;
        } else {
            ops.push_back(expression[i]);
        }
    }

    int m = nums.size();
    vector<vector<int>> dp(m, vector<int>(m, 0));

    for (int i = 0; i < m; i++) {
        dp[i][i] = nums[i]; // Base case: single number
    }

    for (int len = 2; len <= m; len++) {
        for (int i = 0; i <= m - len; i++) {
            int j = i + len - 1;
            for (int k = i; k < j; k++) {
                int val;
                if (ops[k] == '+') {
                    val = dp[i][k] + dp[k + 1][j];
                } else {
                    val = dp[i][k] * dp[k + 1][j];
                }
                dp[i][j] = max(dp[i][j], val);
            }
        }
    }

    // Print the dynamic programming table
    cout << "Dynamic Programming Table:" << endl;
    for (const auto& row : dp) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }

    return dp[0][m - 1];
}

int main() {
    string expression = "2*3+4*5";
    int maxVal = evaluateExpression(expression);
    cout << "Maximum possible value: " << maxVal << endl;
    return 0;
}


=================== prac.cpp =================

#include <iostream>
#include <chrono>

int main() {
    auto start_time = std::chrono::high_resolution_clock::now();

    int count = 0;
    for (int i = 1; i <= 1000000000; ++i) {
        count++;
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed_seconds = end_time - start_time;

    std::cout << "Counting to one million took " << elapsed_seconds.count() << " seconds." << std::endl;

    return 0;
}


=================== rabinkarp.cpp =================

#include <iostream>
#include <string>
#include <math.h>
using namespace std;

const int prime = 101; // prime number for hashing

void rabinKarp(string text, string pattern) {
    int n = text.length();
    int m = pattern.length();
    int patternHash = 0; // hash value for the pattern
    int textHash = 0; // hash value for the current window in the text

    // Calculate the hash value of the pattern and the first window in the text
    for (int i = 0; i < m; i++) {
        patternHash += pattern[i] * pow(prime, i);
        textHash += text[i] * pow(prime, i);
    }

    // Slide the pattern over the text one by one
    for (int i = 0; i <= n - m; i++) {
        // Check if the hash values of the current window in the text and the pattern match
        if (patternHash == textHash) {
            // Check if the characters in the current window and the pattern match
            bool match = true;
            for (int j = 0; j < m; j++) {
                if (text[i + j] != pattern[j]) {
                    match = false;
                    break;
                }
            }
            // If all characters match, print the starting index of the match
            if (match) {
                cout << "Pattern found at index " << i << endl;
            }
        }

        // Calculate the hash value for the next window in the text
        if (i < n - m) {
            textHash = (prime * (textHash - text[i] * pow(prime, 0))) + text[i + m];
        }
    }
}

int main() {
    // string text, pattern;
    // cout << "Enter the text: ";
    // cin >> text;
    // cout << "Enter the pattern: ";
    // cin >> pattern;
    string text = "abcdabdabceabcdab";
    string pattern = "abcdab";
    rabinKarp(text, pattern);

    return 0;
}

=================== ratmaze.cpp =================

#include <iostream>
#include <vector>

using namespace std;

// Function to check if the current cell is a valid move
bool isValidMove(vector<vector<int>>& maze, int row, int col, int n) {
    // Check if the current cell is within the maze boundaries
    if (row >= 0 && row < n && col >= 0 && col < n && maze[row][col] == 1) {
        return true;
    }
    return false;
}

// Function to solve the rat maze problem using backtracking
bool solveMaze(vector<vector<int>>& maze, int row, int col, int n, vector<vector<int>>& path) {
    // Check if the rat has reached the destination
    if (row == n - 1 && col == n - 1) {
        path[row][col] = 1;
        return true;
    }

    // Check if the current cell is a valid move
    if (isValidMove(maze, row, col, n)) {
        // Mark the current cell as part of the path
        path[row][col] = 1;

        // Move to the right
        if (solveMaze(maze, row, col + 1, n, path)) {
            return true;
        }

        // Move to the bottom
        if (solveMaze(maze, row + 1, col, n, path)) {
            return true;
        }

        // If no valid move is possible, backtrack
        path[row][col] = 0;
        return false;
    }

    return false;
}

int main() {
    int n;
    cout << "Enter the size of the maze: ";
    cin >> n;

    vector<vector<int>> maze(n, vector<int>(n));
    cout << "Enter the maze (0 for blocked cell, 1 for open cell):" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> maze[i][j];
        }
    }

    vector<vector<int>> path(n, vector<int>(n, 0));
    if (solveMaze(maze, 0, 0, n, path)) {
        cout << "Path found!" << endl;
        cout << "The path in the maze is:" << endl;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << path[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "No path found!" << endl;
    }

    return 0;
}

=================== subsetsum.cpp =================

#include <iostream>
#include <vector>
using namespace std;

bool isSubsetSum(int arr[], int size, int targetSum, vector<int>& subset)
{
    // Base Cases
    if (targetSum == 0)
        return true;
    if (size == 0)
        return false;

    // If the last element is greater than the targetSum, ignore it
    if (arr[size - 1] > targetSum)
        return isSubsetSum(arr, size - 1, targetSum, subset);

    // Check if the targetSum can be obtained by either including or excluding the last element
    if (isSubsetSum(arr, size - 1, targetSum, subset)) {
        return true;
    } else {
        if (isSubsetSum(arr, size - 1, targetSum - arr[size - 1], subset)) {
            subset.push_back(arr[size - 1]);
            return true;
        }
    }
    return false;
}

int main()
{
    int arr[] = {3, 34, 4, 12, 5, 2};
    int targetSum = 9;
    int size = sizeof(arr) / sizeof(arr[0]);
    vector<int> subset;
    if (isSubsetSum(arr, size, targetSum, subset)) {
        cout << "Found a subset with the given sum " << targetSum << endl;
        cout << "The elements which form the max sum are: ";
        for (int i = 0; i < subset.size(); ++i) {
            cout << subset[i] << " ";
        }
    } else {
        cout << "No subset with the given sum";
    }
    return 0;
}


